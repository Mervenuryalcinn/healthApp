// lib/services/api_service.dart
import 'dart:convert';
import 'package:http/http.dart' as http;

class ApiService {
  // Android emÃ¼latÃ¶rÃ¼nde backendâ€™e baÄŸlanmak iÃ§in Ã¶zel localhost adresi
  static const String baseUrl = 'http://10.0.2.2:5000';

  /// ğŸ”¹ Genel POST isteÄŸi
  /// - [endpoint]: Flask backendâ€™de Ã§aÄŸrÄ±lacak route (Ã¶r. "predict_diabetes")
  /// - [data]: JSON olarak gÃ¶nderilecek body
  /// - BaÅŸarÄ±lÄ± ise backendâ€™den dÃ¶nen JSONâ€™u Map formatÄ±nda dÃ¶ndÃ¼rÃ¼r.
  /// - Hata durumunda {'success': false, 'error': 'mesaj'} yapÄ±sÄ± dÃ¶ndÃ¼rÃ¼r.
  static Future<Map<String, dynamic>> postRequest(String endpoint, Map<String, dynamic> data) async {
    try {
      final response = await http.post(
        Uri.parse('$baseUrl/$endpoint'),
        headers: {'Content-Type': 'application/json'},
        body: json.encode(data),
      );

      if (response.statusCode == 200) {
        final result = json.decode(response.body);
        // Backendâ€™in dÃ¶ndÃ¼rdÃ¼ÄŸÃ¼ yanÄ±t Map deÄŸilse hata mesajÄ± Ã¼ret
        if (result != null && result is Map<String, dynamic>) {
          return result;
        } else {
          return {'success': false, 'error': 'GeÃ§ersiz yanÄ±t formatÄ±'};
        }
      } else {
        // Ã–rneÄŸin 500 veya 404 durumunda
        return {'success': false, 'error': 'Sunucu hatasÄ±: ${response.statusCode}'};
      }
    } catch (e) {
      // Ä°nternet baÄŸlantÄ±sÄ± veya backendâ€™e ulaÅŸamama gibi durumlar
      return {'success': false, 'error': 'Ä°stek gÃ¶nderilemedi: $e'};
    }
  }

  /// ğŸ”¹ Diyabet tahmini isteÄŸi
  /// - Backendâ€™e gerekli tÃ¼m alanlar iletilir ve doÄŸrulama yapÄ±lÄ±r.
  /// - Eksik alan varsa direkt hata mesajÄ± dÃ¶ndÃ¼rÃ¼r.
  static Future<Map<String, dynamic>> predictDiabetes(Map<String, dynamic> data) async {
    // Backend tarafÄ±nda gerekli alanlar listesi
    final requiredFields = [
      'gender', 'age', 'hypertension', 'heart_disease',
      'smoking_history', 'bmi', 'HbA1c_level', 'blood_glucose_level', 'diabetes'
    ];

    // Eksik parametre kontrolÃ¼
    for (var field in requiredFields) {
      if (!data.containsKey(field)) {
        return {'success': false, 'error': '$field is required'};
      }
    }

    // POST isteÄŸi ile tahmin iÅŸlemi
    return await postRequest('predict_diabetes', data);
  }

  /// ğŸ”¹ Genel saÄŸlÄ±k analizi isteÄŸi
  /// - KullanÄ±cÄ±nÄ±n saÄŸlÄ±k verilerini backendâ€™e gÃ¶ndererek analiz sonucu dÃ¶ner.
  static Future<Map<String, dynamic>> analyzeHealthData(Map<String, dynamic> healthData) async {
    return await postRequest('analyze_health', healthData);
  }

  /// ğŸ”¹ Test baÄŸlantÄ±sÄ±
  /// - Backendâ€™in Ã§alÄ±ÅŸÄ±p Ã§alÄ±ÅŸmadÄ±ÄŸÄ±nÄ± test etmek iÃ§in basit GET isteÄŸi
  static Future<Map<String, dynamic>> testConnection() async {
    try {
      final response = await http.get(
        Uri.parse('$baseUrl/test'),
        headers: {'Content-Type': 'application/json'},
      );

      if (response.statusCode == 200) {
        return json.decode(response.body);
      } else {
        return {'success': false, 'error': 'Sunucu hatasÄ±: ${response.statusCode}'};
      }
    } catch (e) {
      return {'success': false, 'error': 'Test baÄŸlantÄ±sÄ± hatasÄ±: $e'};
    }
  }
}
